name: "FSH-Naming Lint"

on:
  workflow_call

jobs:
  lint:
    name: Linting to ensure organization wide readability and homogenization
    runs-on: ubuntu-latest

    steps:
      - name: Checkout IG Source
        uses: actions/checkout@v4
        with:
          path: ig
      
      - name: Validate naming rules
        shell: bash
        run: |
          tmp=$(mktemp)
          echo '### FSH Naming Check' > "$tmp"
          echo >> "$tmp"

          fail=0

          kebab() {
            echo "$1" \
              | sed -E 's/([a-z0-9])([A-Z])/\1-\2/g' \
              | tr '[:upper:]' '[:lower:]'
          }

          report_violation () {
            echo "- ❌ $1" >> "$tmp"
            fail=1
          }

          check_entry () {  # name title id file
            local name="$1" title="$2" ident="$3" file="$4"

            [[ "$name" =~ ^[A-Z][a-zA-Z0-9]*$ ]] || \
              report_violation "\`$name\` in \`$file\` is **not** PascalCase"

            if [[ -n "$title" && "$title" != "$name" ]]; then
              report_violation "Title \"${title}\" ≠ \`${name}\` in \`${file}\`"
            fi

            if [[ -n "$ident" ]]; then
              local expected; expected="$(kebab "$name")"
              [[ "$ident" == "$expected" ]] || \
                report_violation "Id \`${ident}\` should be \`${expected}\` (from \`${name}\`) in \`${file}\`"
            fi
          }

          # Walk through every *.fsh file
          while IFS= read -r -d '' file; do
            current_name="" current_title="" current_id=""
            while IFS= read -r line; do
              if [[ "$line" =~ ^(Profile|CodeSystem|ValueSet):[[:space:]]+([A-Za-z0-9_.-]+) ]]; then
                [[ -n "$current_name" ]] && check_entry "$current_name" "$current_title" "$current_id" "$file"
                current_name="${BASH_REMATCH[2]}"
                current_title="" current_id=""
              elif [[ "$line" =~ ^[[:space:]]*Title:[[:space:]]+\"?([^\"]+)\"? ]]; then
                current_title="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ ^[[:space:]]*Id:[[:space:]]+([A-Za-z0-9_.-]+) ]]; then
                current_id="${BASH_REMATCH[1]}"
              fi
            done < "$file"
            [[ -n "$current_name" ]] && check_entry "$current_name" "$current_title" "$current_id" "$file"
          done < <(find . -name '*.fsh' -print0)

          if [[ $fail -eq 0 ]]; then
            echo "✅ All names, titles and ids follow the rules." >> "$tmp"
          fi

          cat "$tmp"
          echo "LINT_RESULT=$tmp" >> "$GITHUB_ENV"
          echo "LINT_FAILURE=$fail" >> "$GITHUB_ENV"

      - name: Comment on PR
        uses: actions/github-script@v7
        env:
          LINT_FAILURE: env.LINT_FAILURE
          LINT_RESULT: env.LINT_RESULT
        with:
          script: |
            const titleOfComment = "## Linting Result: ";
            const resultEmoji = process.env.LINT_FAILURE === 0 ? "✅" : "❌";
            const body = titleOfComment + resultEmoji + "\n" + process.env.LINT_RESULT;

            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const existing = await github.paginate(
              github.rest.issues.listComments,
              { owner, repo, issue_number: prNumber },
            );

            const ourComment = existing.find(c =>
              c.user.type === 'Bot' &&
              c.body.includes('### FSH Naming Check')
            );

            if (ourComment) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: ourComment.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
            }