name: MedCom publish job

on:
  workflow_call:
    inputs:
      IG_PUBLISHER_VERSION:
        description: With this you can override what version of the publisher should be used
        required: false
        default: 'NONE'
        type: string

jobs:
  qa-report-status:
    name: "Comments the status of the QA report on the PR"
    runs-on: ubuntu-latest
    container: ghcr.io/medcomdk/medcom-github-actions-container:2.0.9
  
    steps:
    - uses: actions/checkout@v4
      with:
        path: ig

    - name: Install pip packages
      run: /pythonvenv/bin/pip3 install beautifulsoup4 lxml regex pathlib

    - name: Download other version of publisher
      if: ${{ inputs.IG_PUBLISHER_VERSION != 'NONE' }}
      shell: bash
      run: |
        wget -O /input-cache/publisher.jar \
        https://github.com/HL7/fhir-ig-publisher/releases/download/${{ inputs.IG_PUBLISHER_VERSION }}/publisher.jar

    - name: Transpile to create qa report
      shell: bash
      working-directory: ig
      run: |
        java -jar /input-cache/publisher.jar -ig .
    
    - name: Create comment from qa report
      working-directory: ig
      run: |
        /pythonvenv/bin/python3 - <<'PY'
        import os, sys
        from bs4 import BeautifulSoup
        import re
        from pathlib import Path

        qa_html_path = "./output/qa.html"
        heading_text = "Reference_REF_Aggregation"

        with open(qa_html_path, encoding="utf-8") as f:
            soup = BeautifulSoup(f, "lxml")

        header = soup.find("h2", string=lambda s: s and s.strip() == heading_text)
        if not header:
            print(f"::error ::Heading '{heading_text}' not found in {qa_html_path}")
            sys.exit(1)

        table = header.find_next("table")
        if table is None:
            print(f"::error ::Table following '{heading_text}' not found")
            sys.exit(1)

        ref_aggregation_rows = len(table.find_all("tr"))

        qa_report_text = Path(qa_html_path).read_text(encoding="utf-8", errors="ignore")

        regex_pattern = re.compile(
            r"<!--\s*broken links\s*=\s*(\d+)\s*,\s*errors\s*=\s*(\d+)"
            r"\s*,\s*warn\s*=\s*(\d+)\s*,\s*info\s*=\s*(\d+)\s*-->",
            re.IGNORECASE
        )

        match = regex_pattern.search(qa_report_text)
        if not match:
            raise ValueError("Health-check comment not found in file.")

        broken_links, errors, warnings, info = map(int, match.groups())

        errors -= ref_aggregation_rows

        comment = 'Errors: ' + str(errors) + ', Warnings: ' + str(warnings) + ', Info: ' + str(info) + ', Broken links: ' + str(broken_links)

        with open(os.environ["GITHUB_ENV"], "a") as ghe:
          ghe.write(f"QA_ERRORS={errors}\n")
          ghe.write(f"QA_WARNINGS={warnings}\n")
          ghe.write(f"QA_REPORT_RESULT={comment}\n")

        PY

    - name: Comment on PR
      uses: actions/github-script@v7
      env:
        QA_REPORT_RESULT: ${{ env.QA_REPORT_RESULT }}
        QA_ERRORS: ${{ env.QA_ERRORS }}
        QA_WARNINGS: ${{ env.QA_WARNINGS }}
        REPO_NAME: ${{ github.event.repository.name }}
        BRANCH_NAME: ${{ github.head_ref }}
      with:
        script: |
          const statusEmoji = process.env.QA_ERRORS > 0 ? "🚨" 
            : process.env.QA_WARNINGS > 0 ? "⚠️"
              : "✅";
          const titleOfComment = "## QA Report status " + statusEmoji;
          const buildSite = "🔨 https://build.fhir.org/ig/medcomdk/" + process.env.REPO_NAME + "/branches/" + process.env.BRANCH_NAME + " 🔨"; 
          const body = titleOfComment + "\n" + buildSite + "\n" + process.env.QA_REPORT_RESULT

          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;

          const existing = await github.paginate(
            github.rest.issues.listComments,
            { owner, repo, issue_number: prNumber },
          );

          const ourComment = existing.find(c =>
            c.user.type === 'Bot' &&
            c.body.includes(titleOfComment)
          );

          if (ourComment) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: ourComment.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
          }

    - name: Fail workflow if errors in qa report
      if: env.QA_ERRORS > 0
      run: |
        exit 1